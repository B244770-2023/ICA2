#!/usr/bin/python3

import os
import sys
import subprocess
from Bio import Entrez,SeqIO
from Bio.ExPASy import ScanProsite

def set_working_directory():
    script_path = os.path.abspath(__file__)
    
    #getting current directory of the script
    script_dir = os.path.dirname(script_path)

    #change working dir
    os.chdir(script_dir)
    print(f"working directory changed to: {script_dir}")

Entrez.email = 'srtse52@outlook.com'

def get_taxonomic_tree(taxonomic_group, email):
    ncbi = NCBITaxa()
    # Search for the taxonomic group to get the NCBI Taxonomy ID
    search_handle = Entrez.esearch(db="taxonomy", term=taxonomic_group, retmode="xml")
    search_results = Entrez.read(search_handle)
    search_handle.close()
    tax_id = search_results['IdList'][0]
    # Get the taxonomic tree
    lineage = ncbi.get_lineage(tax_id)
    names = ncbi.get_taxid_translator(lineage)
    # Generate a tree view as a string
    tree_str = ""
    for depth, taxid in enumerate(lineage):
        tree_str += " " * depth + f"- {names[taxid]} ('{taxid}')\n"
    print(tree_str)
    return tree_str

#fetch all sequences and write in on file
def fetch_sequences_all(taxonomy, protein_family):
    # to fetch sequences based on taxonomy and protein family.
    query = f"{protein_family}[Protein Name] AND {taxonomy}[Organism]"
    search_handle = Entrez.esearch(db="protein", term=query, retmax=10, retmode="xml")
    search_results = Entrez.read(search_handle)
    search_handle.close()
    protein_ids = search_results['IdList']
    fetch_handle = Entrez.efetch(db="protein", id=",".join(protein_ids), rettype="fasta", retmode="text")
    protein_sequences = fetch_handle.read()
    fetch_handle.close()
    
#    return protein_sequences
    folder_path = f'{taxonomy}/{protein_family}'
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    with open(f'{folder_path}/sequences.fasta', 'w') as file:
         file.write(str(protein_sequences))

# get species~protein_ids list
def get_species_protein_ids(taxonomy, protein_family):
    # fetch all sequences
    query = f"{protein_family}[Protein Name] AND {taxonomy}[Organism]"
    search_handle = Entrez.esearch(db="protein", term=query, retmax=10, retmode="xml")
    search_results = Entrez.read(search_handle)
    search_handle.close()

    protein_ids = search_results['IdList']
    species_protein_map = {}

    # fetch names of each protein's species
    for protein_id in protein_ids:
        fetch_handle = Entrez.efetch(db="protein", id=protein_id, rettype="gb", retmode="xml")
        protein_record = Entrez.read(fetch_handle)
        fetch_handle.close()
        species_name = protein_record[0]['GBSeq_organism']
        species_protein_map[species_name] = protein_id

    return species_protein_map


# download sequences based on chosen species
def fetch_sequences(species_protein_map, taxonomy):

    # Create directory for the inerested proteins
    folder_path = f'interested/{taxonomy}'
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)

    sequences = {}
    # fetch handle
    for species, protein_id in species_protein_map.items():
        fetch_handle = Entrez.efetch(db="protein", id=protein_id, rettype="fasta", retmode="text")
        protein_sequence = fetch_handle.read()
        fetch_handle.close()

        # writing to file
        file_path = os.path.join(folder_path, f"{species}.fasta")
        with open(file_path, 'w') as file:
            file.write(str(protein_sequence))

        # save sequences for scanning
        sequences[species] = str(SeqIO.read(file_path, "fasta").seq)

    return sequences

def run_emboss_conservation(taxonomy, protein_family, sequences):
    # to analyze sequence conservation.
    try:
    # 1st to run clustal omega sequence alignment
        subprocess.run(["clustalo", "-i", f'{taxonomy}/{protein_family}/sequences.fasta', "-o", f"{taxonomy}/{protein_family}/aligned_sequences.fasta", "--force", "--outfmt=fasta"])

    # 2nd using plotcon for conservation analysis and generate png plot
    subprocess.run(["plotcon", "-sequence", f"{taxonomy}/{protein_family}/aligned_sequences.fasta", 
                "-winsize", "4", "-graph", "png", "-goutfile", f"{taxonomy}/{protein_family}/conservation_plot"])
    except Exception as e:
        print(f"Error Msg: {e}")

def scan_prosite(sequences):
    #scan sequences with motifs from prosite db
    motifs_results = {}
    for species, sequence in sequences.items():
        scan_results = ScanProsite.scan(seq=sequence)
        matched_motifs[species] = [result['signature_ac'] for result in scan_results]

    return matched_motifs

def perform_additional_emboss_analysis(sequences):
    # Placeholder for additional EMBOSS analysis functions.
    return 0

def main_menu():
    print("1. Conservation Analysis")
    print("2. Scan for PROSITE Motifs")
    print("3. EMBOSS 1")
    print("4. EMBOSS 2")
    print("5. Exit")
    choice = input("Enter your choice: ")
    return choice

def main():
    '''SETTING THE WORKING DIRECTORY AND EXCEPTION CHECK'''
    try:
        set_working_directory()
    except Exception as e:
        print(f"ERROR:can't set working director: {e}")
        sys.exit(1)

    '''CHOOSE FUNCTIONALITY'''
    while True:
        choice = main_menu()

    '''CONSERVATION ANALYSIS'''
    if choice == '1'
        # input the main info of the protein
        taxonomy = input("Enter the taxonomic group: ")
        protein_family = input("Enter the protein family: ")

        # fetch all the sequence
        all_sequences = fetch_sequences_all(taxonomy, protein_family)

        # run emboss conservation analysis
        conservation_data = run_emboss_conservation(taxonomy, protein_family, all_sequences)

    '''SCAN PROTEIN SEQUENCE WITH INTEREST'''
    if choice == '2'
        # input the main info of the protein
        taxonomy = input("Enter the taxonomic group: ")
        protein_family = input("Enter the protein family: ")

        #species mapping
        species_protein_map = get_species_protein_ids(taxonomy, protein_family)
        # giving a list of species and corresponding protein ids
        print("\nAvailable species and corresponding protein IDs:")
        for idx, (species, protein_id) in enumerate(species_protein_map.items(), start=1):
            print(f"{idx}. {species} - {protein_id}")

        # giving options for user
        download_choice = input("\nEnter protein id of your choice. Type 'all' for all sequences, or 'select' to choose specific ones: ")
        # download all sequence
        if download_choice.lower() == 'all':
            fetch_sequences(species_protein_map, taxonomy)
        # download selected ones
        elif download_choice.lower() == 'select':
            selected_indexes = input("Enter the numbers of species you are interested in (separated by commas): ")
            selected_species = {species: species_protein_map[species] 
                                for idx, species in enumerate(species_protein_map, start=1)
                                if str(idx) in selected_indexes.split(',')}
            # fetch the sequence
            fetch_sequences(selected_species, taxonomy)

        # matched ones
        matched_motifs = scan_prosite(sequences)
        # display
        for species, motifs in matched_motifs.items():
            print(f"\n{species} has the following motifs:")
            for motif in motifs:
                print(motif)
        interested_protein_id = input("Enter protein id of your choice: ")
        interested_protein_sequence = 
        prosite_results = scan_prosite(sequences)
    
    '''addtional'''
    if choice =='3'
    additional_results = perform_additional_emboss_analysis(sequences)
    
    # Process and present additional results.
    print(additional_results)

if __name__ == '__main__':
    #set working dir as cwd or a configured one
    working_directory = os.getcwd() if len(sys.argv) == 1 else sys.argv[1]
    input_folder = os.path.join(working_directory, "input_files")
    output_folder = os.path.join(working_directory, "output_files")
    main()
